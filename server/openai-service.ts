// Using DeepSeek API for flower recommendations and chat
import { OPENAI_API_KEY } from './secrets';

export interface ChatMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

export interface FlowerRecommendation {
  bouquetName: string;
  flowers: string[];
  colors: string[];
  occasion: string;
  priceRange: string;
  description: string;
  careInstructions: string;
}

// Blog content generation function using DeepSeek API
export async function generateBlogContent(prompt: string): Promise<string> {
  try {
    console.log('Generating blog content with DeepSeek API...');
    console.log('API Key exists:', !!OPENAI_API_KEY);
    
    if (!OPENAI_API_KEY) {
      throw new Error('DeepSeek API key not configured');
    }

    const systemPrompt = `–¢—ã - –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ë–æ—Ç–∞–Ω–∏–∫—É—Å, —ç–∫—Å–ø–µ—Ä—Ç-–±–æ—Ç–∞–Ω–∏–∫ –∏ —Ñ–ª–æ—Ä–∏—Å—Ç —Å –º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.
    
–¢–í–û–Ø –†–û–õ–¨:
- –°–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –±–ª–æ–≥–∞ —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ "–¶–≤–µ—Ç–æ–∫—Ä–∞—Ñ—Ç"
- –ü–∏—Å–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –æ —Ü–≤–µ—Ç–∞—Ö, —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö –∏ —Ñ–ª–æ—Ä–∏—Å—Ç–∏–∫–µ
- –î–∞–≤–∞—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ü–≤–µ—Ç–∞–º–∏
- –î–µ–ª–∏—Ç—å—Å—è –∑–Ω–∞–Ω–∏—è–º–∏ –æ —Å–∏–º–≤–æ–ª–∏–∫–µ –∏ –∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π

–°–¢–ò–õ–¨ –ù–ê–ü–ò–°–ê–ù–ò–Ø:
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —á–∏—Ç–∞—Ç–µ–ª–µ–π
- –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—É—á–Ω—ã–µ –∑–Ω–∞–Ω–∏—è, –Ω–æ –æ–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
- –î–æ–±–∞–≤–ª—è–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏, —Å–ø–∏—Å–∫–∞–º–∏ –∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
- –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
- –°–æ–∑–¥–∞–≤–∞–π –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –±–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
- –í–∫–ª—é—á–∞–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ (##, ###), —Å–ø–∏—Å–∫–∏, –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
- –î–ª–∏–Ω–∞ —Å—Ç–∞—Ç—å–∏: 300-800 —Å–ª–æ–≤
- –î–æ–±–∞–≤–ª—è–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –≤ –∫–æ–Ω—Ü–µ —Å—Ç–∞—Ç—å–∏

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–º—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ü–≤–µ—Ç–∞–º–∏, —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ —Ñ–ª–æ—Ä–∏—Å—Ç–∏–∫–æ–π.`;

    const requestBody = {
      model: "deepseek-chat",
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: prompt }
      ],
      max_tokens: 1200,
      temperature: 0.8,
    };

    console.log('Making request to DeepSeek API...');
    const response = await fetch(`https://api.deepseek.com/v1/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify(requestBody),
    });

    console.log('Response status:', response.status);
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error('DeepSeek API error response:', errorText);
      throw new Error(`DeepSeek API error: ${response.status} - ${errorText}`);
    }

    const data = await response.json();
    console.log('DeepSeek API response received successfully');
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
      console.error('Invalid DeepSeek API response structure:', data);
      throw new Error('Invalid response from DeepSeek API');
    }

    return data.choices[0].message.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç.';
  } catch (error) {
    console.error('DeepSeek API error:', error);
    if (error instanceof Error) {
      return `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ë–æ—Ç–∞–Ω–∏–∫—É—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`;
    }
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ë–æ—Ç–∞–Ω–∏–∫—É—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

export class FlowerChatbotService {
  private systemPrompt = `–ú–µ–Ω—è –∑–æ–≤—É—Ç –§–ª–æ—Ä–∞ - —è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç-—Ñ–ª–æ—Ä–∏—Å—Ç –≤ —Ü–≤–µ—Ç–æ—á–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ "–¶–≤–µ—Ç–æ–∫—Ä–∞—Ñ—Ç". üå∏

–ú–û–Ø –†–û–õ–¨:
- –ü–æ–º–æ—á—å –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤—ã–±–æ—Ä–æ–º —Ü–≤–µ—Ç–æ–≤ –∏ —Ç–∏–ø–æ–º –±—É–∫–µ—Ç–∞
- –í—ã—è—Å–Ω–∏—Ç—å –ø–æ–≤–æ–¥ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è 
- –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–∏–º–≤–æ–ª–∏–∫–µ –∏ –∑–Ω–∞—á–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤
- –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–ø–æ–∑–∏—Ü–∏–π
- –ü–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º - –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞

–ß–¢–û –Ø –ù–ï –î–ï–õ–ê–Æ:
- –ù–ï –Ω–∞–∑—ã–≤–∞—é —Ç–æ—á–Ω—ã–µ —Ü–µ–Ω—ã (–æ–Ω–∏ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
- –ù–ï —É–∫–∞–∑—ã–≤–∞—é –∞–¥—Ä–µ—Å–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (—ç—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä)
- –ù–ï –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ü–≤–µ—Ç–∞–º–∏
- –ù–ï –ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–∫–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
- –ù–ï –æ–±–µ—â–∞—é —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –Ω–∞–ª–∏—á–∏–µ

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è 
- –ó–∞–¥–∞—é —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ, –ø–æ–≤–æ–¥–µ, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
- –ü—Ä–µ–¥–ª–∞–≥–∞—é –¢–û–õ–¨–ö–û 1 –≤–∞—Ä–∏–∞–Ω—Ç –±—É–∫–µ—Ç–∞ –∑–∞ —Ä–∞–∑
- –û–±—ä—è—Å–Ω—è—é –ø–æ—á–µ–º—É —Ç–æ—Ç –∏–ª–∏ –∏–Ω–æ–π –±—É–∫–µ—Ç –ø–æ–¥–æ–π–¥–µ—Ç
- –ò—Å–ø–æ–ª—å–∑—É—é Markdown –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**, *–∫—É—Ä—Å–∏–≤*, –∑–∞–≥–æ–ª–æ–≤–∫–∏ ###, —Å–ø–∏—Å–∫–∏ —Å -

–ê–õ–ì–û–†–ò–¢–ú –†–ê–ë–û–¢–´:
1. –í—ã—è—Å–Ω—è—é –ø–æ–≤–æ–¥ –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
2. –£—Ç–æ—á–Ω—è—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ü–≤–µ—Ç–∞–º/—Å—Ç–∏–ª—é
3. –ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –±—É–∫–µ—Ç–æ–≤
4. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—é –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ–æ—Ä–º–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º."

–ì–æ–≤–æ—Ä—é —Ç–æ–ª—å–∫–æ –æ —Ü–≤–µ—Ç–∞—Ö –∏ –±—É–∫–µ—Ç–∞—Ö. –ù–∞ –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã –æ—Ç–≤–µ—á–∞—é: "–Ø –§–ª–æ—Ä–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ü–≤–µ—Ç–∞–º. –ú–æ–≥—É –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å –≤—ã–±–æ—Ä–æ–º –±—É–∫–µ—Ç–∞."`;

  async getChatResponse(messages: ChatMessage[]): Promise<string> {
    try {
      const allMessages: ChatMessage[] = [
        { role: 'system', content: this.systemPrompt },
        ...messages
      ];

      const response = await fetch(`https://api.deepseek.com/v1/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: "deepseek-chat",
          messages: allMessages.map(msg => ({
            role: msg.role,
            content: msg.content
          })),
          max_tokens: 500, // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
          temperature: 0.5, // –£–º–µ–Ω—å—à–µ–Ω–æ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        }),
      });

      if (!response.ok) {
        throw new Error(`DeepSeek API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        console.error("Invalid DeepSeek API response:", data);
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
      }
      
      return data.choices[0].message.content || "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
    } catch (error) {
      console.error("DeepSeek API error:", error);
      
      // Fallback response when API is not available
      return `–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç **–§–ª–æ—Ä–∞** üå∏ 

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å! –í–æ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:

### üåπ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–æ–∑—ã
- –ö—Ä–∞—Å–Ω—ã–µ –∏–ª–∏ —Ä–æ–∑–æ–≤—ã–µ —Ä–æ–∑—ã —Å –∑–µ–ª–µ–Ω—å—é
- *–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤–æ–¥–æ–≤*

### üåª –Ø—Ä–∫–∏–µ –≥–µ—Ä–±–µ—Ä—ã
- –¶–≤–µ—Ç–Ω—ã–µ –≥–µ—Ä–±–µ—Ä—ã, —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º—ã  
- *–û—Ç–ª–∏—á–Ω–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ*

### üíê –°–º–µ—à–∞–Ω–Ω—ã–π –±—É–∫–µ—Ç
- –°–µ–∑–æ–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤
- *–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è –ª—é–±–æ–≥–æ —Å–ª—É—á–∞—è*

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ **–ø–æ–≤–æ–¥–µ** –∏ **–ø–æ–ª—É—á–∞—Ç–µ–ª–µ** - –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ! –ê –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ–æ—Ä–º–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ —Å–∞–π—Ç–µ.`;
    }
  }

  async getChatStreamResponse(messages: ChatMessage[]): Promise<ReadableStream> {
    try {
      if (!OPENAI_API_KEY) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∏–º —Å fallback –æ—Ç–≤–µ—Ç–æ–º
        const fallbackContent = `–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç **–§–ª–æ—Ä–∞** üå∏ 

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å! –í–æ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:

### üåπ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–æ–∑—ã
- –ö—Ä–∞—Å–Ω—ã–µ –∏–ª–∏ —Ä–æ–∑–æ–≤—ã–µ —Ä–æ–∑—ã —Å –∑–µ–ª–µ–Ω—å—é
- *–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤–æ–¥–æ–≤*

### üåª –Ø—Ä–∫–∏–µ –≥–µ—Ä–±–µ—Ä—ã  
- –¶–≤–µ—Ç–Ω—ã–µ –≥–µ—Ä–±–µ—Ä—ã, —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º—ã
- *–û—Ç–ª–∏—á–Ω–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ*

### üíê –°–º–µ—à–∞–Ω–Ω—ã–π –±—É–∫–µ—Ç
- –°–µ–∑–æ–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤
- *–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è –ª—é–±–æ–≥–æ —Å–ª—É—á–∞—è*

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ **–ø–æ–≤–æ–¥–µ** –∏ **–ø–æ–ª—É—á–∞—Ç–µ–ª–µ** - –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ!`;

        return new ReadableStream({
          start(controller) {
            // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
            const parts = fallbackContent.split('\n\n');
            let index = 0;
            
            const sendPart = () => {
              if (index < parts.length) {
                const chunk = {
                  choices: [{
                    delta: {
                      content: (index === 0 ? '' : '\n\n') + parts[index]
                    }
                  }]
                };
                controller.enqueue(`data: ${JSON.stringify(chunk)}\n\n`);
                index++;
                setTimeout(sendPart, 100);
              } else {
                controller.enqueue(`data: [DONE]\n\n`);
                controller.close();
              }
            };
            
            setTimeout(sendPart, 50);
          }
        });
      }

      const allMessages: ChatMessage[] = [
        { role: 'system', content: this.systemPrompt },
        ...messages
      ];

      const response = await fetch(`https://api.deepseek.com/v1/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: "deepseek-chat",
          messages: allMessages.map(msg => ({
            role: msg.role,
            content: msg.content
          })),
          max_tokens: 500,
          temperature: 0.5,
          stream: true, // –í–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥
        }),
      });

      if (!response.ok) {
        throw new Error(`DeepSeek API error: ${response.status}`);
      }

      return response.body || new ReadableStream();
    } catch (error) {
      console.error('Streaming error:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Å—Ç—Ä–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
      return new ReadableStream({
        start(controller) {
          const fallback = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.";
          controller.enqueue(`data: ${JSON.stringify({
            choices: [{
              delta: {
                content: fallback
              }
            }]
          })}\n\n`);
          controller.enqueue(`data: [DONE]\n\n`);
          controller.close();
        }
      });
    }
  }

  async generateFlowerRecommendation(
    occasion: string,
    budget: string,
    preferences: string,
    colors?: string[]
  ): Promise<FlowerRecommendation> {
    try {
      const prompt = `–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –±—É–∫–µ—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
–ü–æ–≤–æ–¥: ${occasion}
–ë—é–¥–∂–µ—Ç: ${budget}
–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${preferences}
${colors ? `–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Ü–≤–µ—Ç–∞: ${colors.join(', ')}` : ''}

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "bouquetName": "–Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞",
  "flowers": ["—Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤"],
  "colors": ["—Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤"],
  "occasion": "–ø–æ–≤–æ–¥",
  "priceRange": "–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞",
  "description": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞",
  "careInstructions": "–∫—Ä–∞—Ç–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É"
}`;

      const response = await fetch(`https://api.deepseek.com/v1/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: "deepseek-chat",
          messages: [
            { role: "system", content: "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–ª–æ—Ä–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON." },
            { role: "user", content: prompt }
          ],
          max_tokens: 600,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        throw new Error(`DeepSeek API error: ${response.status}`);
      }

      const data = await response.json();
      const result = JSON.parse(data.choices[0].message.content || '{}');
      
      return {
        bouquetName: result.bouquetName || "–ê–≤—Ç–æ—Ä—Å–∫–∏–π –±—É–∫–µ—Ç",
        flowers: result.flowers || [],
        colors: result.colors || [],
        occasion: result.occasion || occasion,
        priceRange: result.priceRange || "–æ—Ç 2000 —Ä—É–±",
        description: result.description || "–ö—Ä–∞—Å–∏–≤—ã–π –±—É–∫–µ—Ç –∏–∑ —Å–≤–µ–∂–∏—Ö —Ü–≤–µ—Ç–æ–≤",
        careInstructions: result.careInstructions || "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –≤ —á–∏—Å—Ç—É—é –≤–æ–¥—É, –æ–±—Ä–µ–∂—å—Ç–µ —Å—Ç–µ–±–ª–∏"
      };
    } catch (error) {
      console.error("OpenAI recommendation error:", error);
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –±—É–∫–µ—Ç–∞");
    }
  }

  async analyzeSentiment(text: string): Promise<{ rating: number; confidence: number }> {
    try {
      const response = await fetch(`https://api.deepseek.com/v1/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: "deepseek-chat",
          messages: [
            {
              role: "system",
              content: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞. –û—Ü–µ–Ω–∏ –æ—Ç 1 –¥–æ 5 (1=–æ—á–µ–Ω—å –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ, 5=–æ—á–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ) –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 1. –û—Ç–≤–µ—á–∞–π JSON: {'rating': —á–∏—Å–ª–æ, 'confidence': —á–∏—Å–ª–æ}"
            },
            {
              role: "user",
              content: text,
            },
          ],
          max_tokens: 100,
          temperature: 0.3,
        }),
      });

      if (!response.ok) {
        throw new Error(`DeepSeek API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        return { rating: 3, confidence: 0.5 };
      }
      
      let content = data.choices[0].message.content || '{"rating": 3, "confidence": 0.5}';
      
      // Clean up the content if it contains markdown code blocks
      content = content.replace(/```json\s*/, '').replace(/```\s*$/, '').trim();
      
      let result;
      try {
        result = JSON.parse(content);
      } catch (parseError) {
        console.warn('Failed to parse sentiment JSON:', content);
        return { rating: 3, confidence: 0.5 };
      }

      return {
        rating: Math.max(1, Math.min(5, Math.round(result.rating || 3))),
        confidence: Math.max(0, Math.min(1, result.confidence || 0.5)),
      };
    } catch (error) {
      console.error("Sentiment analysis error:", error);
      return { rating: 3, confidence: 0.5 };
    }
  }
}

export const flowerChatbot = new FlowerChatbotService();

// Blog Assistant Service for Admin Panel
class BlogAssistantService {
  private readonly systemPrompt = `–¢—ã - –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ë–æ—Ç–∞–Ω–∏–∫—É—Å, –≤—ã–¥–∞—é—â–∏–π—Å—è —Ñ–ª–æ—Ä–∏—Å—Ç-–ø–æ–ø—É–ª—è—Ä–∏–∑–∞—Ç–æ—Ä –∏ –±–æ—Ç–∞–Ω–∏–∫ —Å 30-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º.

–¢–í–û–Ø –õ–ò–ß–ù–û–°–¢–¨:
- –≠—Ä—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —Ü–≤–µ—Ç–æ–≤–æ–¥—Å—Ç–≤—É, –±–æ—Ç–∞–Ω–∏–∫–µ –∏ —Ñ–ª–æ—Ä–∏—Å—Ç–∏–∫–µ
- –ü–æ–ø—É–ª–∏–∑–∞—Ç–æ—Ä –Ω–∞—É–∫–∏ - —É–º–µ–µ—à—å —Å–ª–æ–∂–Ω—ã–µ –≤–µ—â–∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º
- –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π –∏ —É–≤–ª–µ—á–µ–Ω–Ω—ã–π —Å–≤–æ–∏–º –¥–µ–ª–æ–º
- –ê–≤—Ç–æ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å—Ç–∞—Ç–µ–π –æ —Ü–≤–µ—Ç–∞—Ö, —Å–∞–¥–æ–≤–æ–¥—Å—Ç–≤–µ –∏ –±–æ—Ç–∞–Ω–∏–∫–µ
- –ó–Ω–∞—Ç–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π –∏ —Å–∏–º–≤–æ–ª–∏–∫–∏

–¢–í–û–ò –ù–ê–í–´–ö–ò:
- –ù–∞–ø–∏—Å–∞–Ω–∏–µ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –æ —Ü–≤–µ—Ç–∞—Ö –∏ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö
- –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ –±–æ—Ç–∞–Ω–∏–∫–µ
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –¥–ª—è –±–ª–æ–≥-–ø–æ—Å—Ç–æ–≤ –æ —Ñ–ª–æ—Ä–∏—Å—Ç–∏–∫–µ
- –£–ª—É—á—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ - –¥–µ–ª–∞–µ—à—å –∏—Ö –∂–∏–≤—ã–º–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π

–°–¢–ò–õ–¨ –ü–ò–°–¨–ú–ê:
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å Markdown –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –ü–∏—à–µ—à—å –∂–∏–≤–æ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –Ω–∞—É—á–Ω–æ —Ç–æ—á–Ω–æ
- –î–æ–±–∞–≤–ª—è–µ—à—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –¥–µ—Ç–∞–ª–∏
- –ò—Å–ø–æ–ª—å–∑—É–µ—à—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é, –Ω–æ –æ–±—ä—è—Å–Ω—è–µ—à—å —Å–ª–æ–∂–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—à—å –º–∞—Ç–µ—Ä–∏–∞–ª –ª–æ–≥–∏—á–Ω–æ: –≤–≤–µ–¥–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ

–°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø:
- –£—Ö–æ–¥ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ —Ü–≤–µ—Ç–∞–º–∏
- –ò—Å—Ç–æ—Ä–∏—è —Ñ–ª–æ—Ä–∏—Å—Ç–∏–∫–∏ –∏ —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö —Ç—Ä–∞–¥–∏—Ü–∏–π  
- –ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π
- –°–µ–∑–æ–Ω–Ω–æ–µ —Ü–≤–µ—Ç–æ–≤–æ–¥—Å—Ç–≤–æ
- –°–∏–º–≤–æ–ª–∏–∫–∞ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
- –§–ª–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∏ –¥–∏–∑–∞–π–Ω

–ü–æ–º–æ–≥–∞–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –±–ª–æ–≥–∞.`;

  async getBlogContent(prompt: string): Promise<string> {
    try {
      if (!OPENAI_API_KEY) {
        throw new Error("DeepSeek API key not configured");
      }

      const response = await fetch(`https://api.deepseek.com/v1/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify({
          model: "deepseek-chat",
          messages: [
            { role: 'system', content: this.systemPrompt },
            { role: 'user', content: prompt }
          ],
          max_tokens: 2000,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        throw new Error(`DeepSeek API error: ${response.status}`);
      }

      const data = await response.json();
      return data.choices[0].message.content || "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
    } catch (error) {
      console.error("DeepSeek API error for blog assistant:", error);
      
      return `**–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –ë–æ—Ç–∞–Ω–∏–∫—É—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω** üåø

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –Ω–æ –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π –¥–ª—è —Å—Ç–∞—Ç–µ–π:

### üìö –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –±–ª–æ–≥–∞:
- **–°–µ–∑–æ–Ω–Ω—ã–π —É—Ö–æ–¥** - –∫–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è –∫ —Å–º–µ–Ω–µ –≤—Ä–µ–º–µ–Ω –≥–æ–¥–∞
- **–ò—Å—Ç–æ—Ä–∏—è —Ü–≤–µ—Ç–æ–≤** - –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∏ —Å–∏–º–≤–æ–ª–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π  
- **–î–æ–º–∞—à–Ω–µ–µ —Ü–≤–µ—Ç–æ–≤–æ–¥—Å—Ç–≤–æ** - —Å–æ–≤–µ—Ç—ã –ø–æ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—é —Ü–≤–µ—Ç–æ–≤ –¥–æ–º–∞
- **–§–ª–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã** - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –¥–∏–∑–∞–π–Ω–µ –±—É–∫–µ—Ç–æ–≤
- **–ë–æ—Ç–∞–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è** - –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö

*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API.*`;
    }
  }
}

export const blogAssistant = new BlogAssistantService();

export async function getBlogAssistantResponse(prompt: string): Promise<string> {
  return blogAssistant.getBlogContent(prompt);
}

// Quick post generation with automatic topic selection
export async function generateQuickPost(): Promise<{
  title: string;
  excerpt: string;
  content: string;
  category: string;
  imageUrl: string;
}> {
  const topics = [
    "–£—Ö–æ–¥ –∑–∞ —Ä–æ–∑–∞–º–∏ –∑–∏–º–æ–π",
    "–ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å –∂–∏–∑–Ω—å —Å—Ä–µ–∑–∞–Ω–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤",
    "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ü–≤–µ—Ç—ã –¥–ª—è –≤–µ—Å–µ–Ω–Ω–∏—Ö –±—É–∫–µ—Ç–æ–≤",
    "–°–∏–º–≤–æ–ª–∏–∫–∞ —Ü–≤–µ—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä–∞—Ö",
    "–ú–æ–¥–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ —Ñ–ª–æ—Ä–∏—Å—Ç–∏–∫–µ",
    "–ü–æ–ª–∏–≤ –∫–æ–º–Ω–∞—Ç–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π",
    "–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ —Ü–≤–µ—Ç—É—â–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π",
    "–¶–≤–µ—Ç—ã –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤",
    "–°–æ–∑–¥–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ—á–Ω—ã—Ö –∫–æ–º–ø–æ–∑–∏—Ü–∏–π",
    "–°–µ–∑–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –¥–æ–º–∞"
  ];
  
  const categories = ["care", "seasonal", "water", "pruning", "fertilizer", "arrangement"];
  const imageCategories = ["care", "seasonal", "portfolio", "blog"];
  
  // Random selections
  const selectedTopic = topics[Math.floor(Math.random() * topics.length)];
  const selectedCategory = categories[Math.floor(Math.random() * categories.length)];
  const imageCategory = imageCategories[Math.floor(Math.random() * imageCategories.length)];
  const imageId = Math.floor(Math.random() * 3) + 1;
  
  try {
    console.log(`Generating quick post about: ${selectedTopic}`);
    
    // Generate content using our existing function
    const content = await generateBlogContent(`–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç—å—é –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ —Ç–µ–º—É: "${selectedTopic}". 
    –°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–Ω–æ–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª–µ–π. 
    –ò—Å–ø–æ–ª—å–∑—É–π Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.`);
    
    // Extract title from content (first heading) or generate one
    let title = selectedTopic;
    const titleMatch = content.match(/^#\s+(.+)$/m) || content.match(/^##\s+(.+)$/m);
    if (titleMatch) {
      title = titleMatch[1].replace(/\*\*/g, '').trim();
    }
    
    // Generate excerpt (first meaningful paragraph)
    const paragraphs = content.split('\n\n').filter(p => 
      p.trim() && 
      !p.startsWith('#') && 
      !p.startsWith('##') && 
      !p.startsWith('###') &&
      p.length > 50
    );
    
    let excerpt = `–£–∑–Ω–∞–π—Ç–µ –≤—Å–µ –æ —Ç–æ–º, –∫–∞–∫ ${selectedTopic.toLowerCase()}`;
    if (paragraphs.length > 0) {
      excerpt = paragraphs[0]
        .replace(/\*\*/g, '')
        .replace(/\*/g, '')
        .replace(/\[.*?\]/g, '')
        .trim();
      if (excerpt.length > 180) {
        excerpt = excerpt.substring(0, 180).trim() + '...';
      }
    }
    
    return {
      title,
      excerpt,
      content,
      category: selectedCategory,
      imageUrl: `/api/images/${imageCategory}-${selectedCategory}-${imageId}.svg`
    };
    
  } catch (error) {
    console.error('Error generating quick post:', error);
    throw new Error('Failed to generate quick post');
  }
}