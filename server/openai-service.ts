// Using DeepSeek API for flower recommendations and chat
const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
const DEEPSEEK_BASE_URL = 'https://api.deepseek.com';

export interface ChatMessage {
  role: 'user' | 'assistant' | 'system';
  content: string;
}

export interface FlowerRecommendation {
  bouquetName: string;
  flowers: string[];
  colors: string[];
  occasion: string;
  priceRange: string;
  description: string;
  careInstructions: string;
}

export class FlowerChatbotService {
  private systemPrompt = `–ú–µ–Ω—è –∑–æ–≤—É—Ç –§–ª–æ—Ä–∞ - —è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç-—Ñ–ª–æ—Ä–∏—Å—Ç –≤ —Ü–≤–µ—Ç–æ—á–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ "–¶–≤–µ—Ç–æ–∫—Ä–∞—Ñ—Ç". üå∏

–ú–û–Ø –†–û–õ–¨:
- –ü–æ–º–æ—á—å –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤—ã–±–æ—Ä–æ–º —Ü–≤–µ—Ç–æ–≤ –∏ —Ç–∏–ø–æ–º –±—É–∫–µ—Ç–∞
- –í—ã—è—Å–Ω–∏—Ç—å –ø–æ–≤–æ–¥ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è 
- –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–∏–º–≤–æ–ª–∏–∫–µ –∏ –∑–Ω–∞—á–µ–Ω–∏–∏ —Ü–≤–µ—Ç–æ–≤
- –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–ø–æ–∑–∏—Ü–∏–π
- –ü–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º - –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞

–ß–¢–û –Ø –ù–ï –î–ï–õ–ê–Æ:
- –ù–ï –Ω–∞–∑—ã–≤–∞—é —Ç–æ—á–Ω—ã–µ —Ü–µ–Ω—ã (–æ–Ω–∏ –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
- –ù–ï —É–∫–∞–∑—ã–≤–∞—é –∞–¥—Ä–µ—Å–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (—ç—Ç–æ –¥–µ–ª–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä)
- –ù–ï –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ü–≤–µ—Ç–∞–º–∏
- –ù–ï –ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–∫–∞–∑—ã –Ω–∞–ø—Ä—è–º—É—é
- –ù–ï –æ–±–µ—â–∞—é —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –Ω–∞–ª–∏—á–∏–µ

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –î—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è 
- –ó–∞–¥–∞—é —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ, –ø–æ–≤–æ–¥–µ, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
- –ü—Ä–µ–¥–ª–∞–≥–∞—é 2-3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä
- –û–±—ä—è—Å–Ω—è—é –ø–æ—á–µ–º—É —Ç–æ—Ç –∏–ª–∏ –∏–Ω–æ–π –±—É–∫–µ—Ç –ø–æ–¥–æ–π–¥–µ—Ç
- –ò—Å–ø–æ–ª—å–∑—É—é Markdown –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**, *–∫—É—Ä—Å–∏–≤*, –∑–∞–≥–æ–ª–æ–≤–∫–∏ ###, —Å–ø–∏—Å–∫–∏ —Å -

–ê–õ–ì–û–†–ò–¢–ú –†–ê–ë–û–¢–´:
1. –í—ã—è—Å–Ω—è—é –ø–æ–≤–æ–¥ –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
2. –£—Ç–æ—á–Ω—è—é –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ü–≤–µ—Ç–∞–º/—Å—Ç–∏–ª—é
3. –ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –±—É–∫–µ—Ç–æ–≤
4. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª—è—é –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ–æ—Ä–º–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ —Å–∞–π—Ç–µ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º."

–ì–æ–≤–æ—Ä—é —Ç–æ–ª—å–∫–æ –æ —Ü–≤–µ—Ç–∞—Ö –∏ –±—É–∫–µ—Ç–∞—Ö. –ù–∞ –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã –æ—Ç–≤–µ—á–∞—é: "–Ø –§–ª–æ—Ä–∞, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ü–≤–µ—Ç–∞–º. –ú–æ–≥—É –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å –≤—ã–±–æ—Ä–æ–º –±—É–∫–µ—Ç–∞."`;

  async getChatResponse(messages: ChatMessage[]): Promise<string> {
    try {
      const allMessages: ChatMessage[] = [
        { role: 'system', content: this.systemPrompt },
        ...messages
      ];

      const response = await fetch(`${DEEPSEEK_BASE_URL}/v1/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
        },
        body: JSON.stringify({
          model: "deepseek-chat",
          messages: allMessages.map(msg => ({
            role: msg.role,
            content: msg.content
          })),
          max_tokens: 800,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        throw new Error(`DeepSeek API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        console.error("Invalid DeepSeek API response:", data);
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
      }
      
      return data.choices[0].message.content || "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
    } catch (error) {
      console.error("DeepSeek API error:", error);
      
      // Fallback response when API is not available
      return `–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç **–§–ª–æ—Ä–∞** üå∏ 

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, –Ω–æ —è –≤—Å–µ —Ä–∞–≤–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å! –í–æ—Ç –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:

### üåπ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ä–æ–∑—ã
- –ö—Ä–∞—Å–Ω—ã–µ –∏–ª–∏ —Ä–æ–∑–æ–≤—ã–µ —Ä–æ–∑—ã —Å –∑–µ–ª–µ–Ω—å—é
- *–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤–æ–¥–æ–≤*

### üåª –Ø—Ä–∫–∏–µ –≥–µ—Ä–±–µ—Ä—ã
- –¶–≤–µ—Ç–Ω—ã–µ –≥–µ—Ä–±–µ—Ä—ã, —Ö—Ä–∏–∑–∞–Ω—Ç–µ–º—ã  
- *–û—Ç–ª–∏—á–Ω–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ*

### üíê –°–º–µ—à–∞–Ω–Ω—ã–π –±—É–∫–µ—Ç
- –°–µ–∑–æ–Ω–Ω—ã–µ —Ü–≤–µ—Ç—ã —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤
- *–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è –ª—é–±–æ–≥–æ —Å–ª—É—á–∞—è*

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ **–ø–æ–≤–æ–¥–µ** –∏ **–ø–æ–ª—É—á–∞—Ç–µ–ª–µ** - –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ! –ê –¥–ª—è –∑–∞–∫–∞–∑–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ–æ—Ä–º–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞ —Å–∞–π—Ç–µ.`;
    }
  }

  async generateFlowerRecommendation(
    occasion: string,
    budget: string,
    preferences: string,
    colors?: string[]
  ): Promise<FlowerRecommendation> {
    try {
      const prompt = `–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –±—É–∫–µ—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
–ü–æ–≤–æ–¥: ${occasion}
–ë—é–¥–∂–µ—Ç: ${budget}
–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${preferences}
${colors ? `–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Ü–≤–µ—Ç–∞: ${colors.join(', ')}` : ''}

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "bouquetName": "–Ω–∞–∑–≤–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞",
  "flowers": ["—Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤"],
  "colors": ["—Å–ø–∏—Å–æ–∫ —Ü–≤–µ—Ç–æ–≤"],
  "occasion": "–ø–æ–≤–æ–¥",
  "priceRange": "–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞",
  "description": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–∫–µ—Ç–∞",
  "careInstructions": "–∫—Ä–∞—Ç–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É"
}`;

      const response = await fetch(`${DEEPSEEK_BASE_URL}/v1/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
        },
        body: JSON.stringify({
          model: "deepseek-chat",
          messages: [
            { role: "system", content: "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–ª–æ—Ä–∏—Å—Ç. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON." },
            { role: "user", content: prompt }
          ],
          max_tokens: 600,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        throw new Error(`DeepSeek API error: ${response.status}`);
      }

      const data = await response.json();
      const result = JSON.parse(data.choices[0].message.content || '{}');
      
      return {
        bouquetName: result.bouquetName || "–ê–≤—Ç–æ—Ä—Å–∫–∏–π –±—É–∫–µ—Ç",
        flowers: result.flowers || [],
        colors: result.colors || [],
        occasion: result.occasion || occasion,
        priceRange: result.priceRange || "–æ—Ç 2000 —Ä—É–±",
        description: result.description || "–ö—Ä–∞—Å–∏–≤—ã–π –±—É–∫–µ—Ç –∏–∑ —Å–≤–µ–∂–∏—Ö —Ü–≤–µ—Ç–æ–≤",
        careInstructions: result.careInstructions || "–ü–æ—Å—Ç–∞–≤—å—Ç–µ –≤ —á–∏—Å—Ç—É—é –≤–æ–¥—É, –æ–±—Ä–µ–∂—å—Ç–µ —Å—Ç–µ–±–ª–∏"
      };
    } catch (error) {
      console.error("OpenAI recommendation error:", error);
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –±—É–∫–µ—Ç–∞");
    }
  }

  async analyzeSentiment(text: string): Promise<{ rating: number; confidence: number }> {
    try {
      const response = await fetch(`${DEEPSEEK_BASE_URL}/v1/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${DEEPSEEK_API_KEY}`,
        },
        body: JSON.stringify({
          model: "deepseek-chat",
          messages: [
            {
              role: "system",
              content: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞. –û—Ü–µ–Ω–∏ –æ—Ç 1 –¥–æ 5 (1=–æ—á–µ–Ω—å –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ, 5=–æ—á–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ) –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 1. –û—Ç–≤–µ—á–∞–π JSON: {'rating': —á–∏—Å–ª–æ, 'confidence': —á–∏—Å–ª–æ}"
            },
            {
              role: "user",
              content: text,
            },
          ],
          max_tokens: 100,
          temperature: 0.3,
        }),
      });

      if (!response.ok) {
        throw new Error(`DeepSeek API error: ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        return { rating: 3, confidence: 0.5 };
      }
      
      let content = data.choices[0].message.content || '{"rating": 3, "confidence": 0.5}';
      
      // Clean up the content if it contains markdown code blocks
      content = content.replace(/```json\s*/, '').replace(/```\s*$/, '').trim();
      
      let result;
      try {
        result = JSON.parse(content);
      } catch (parseError) {
        console.warn('Failed to parse sentiment JSON:', content);
        return { rating: 3, confidence: 0.5 };
      }

      return {
        rating: Math.max(1, Math.min(5, Math.round(result.rating || 3))),
        confidence: Math.max(0, Math.min(1, result.confidence || 0.5)),
      };
    } catch (error) {
      console.error("Sentiment analysis error:", error);
      return { rating: 3, confidence: 0.5 };
    }
  }
}

export const flowerChatbot = new FlowerChatbotService();